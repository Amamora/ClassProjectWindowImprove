#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowClassProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WINDOWCLASS")]
	public partial class MyLinQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCLASS(CLASS instance);
    partial void UpdateCLASS(CLASS instance);
    partial void DeleteCLASS(CLASS instance);
    partial void InsertUSERACCOUNT(USERACCOUNT instance);
    partial void UpdateUSERACCOUNT(USERACCOUNT instance);
    partial void DeleteUSERACCOUNT(USERACCOUNT instance);
    partial void InsertCOURSE(COURSE instance);
    partial void UpdateCOURSE(COURSE instance);
    partial void DeleteCOURSE(COURSE instance);
    partial void InsertDEPARTMENT(DEPARTMENT instance);
    partial void UpdateDEPARTMENT(DEPARTMENT instance);
    partial void DeleteDEPARTMENT(DEPARTMENT instance);
    partial void InsertGROUPSUBJECT(GROUPSUBJECT instance);
    partial void UpdateGROUPSUBJECT(GROUPSUBJECT instance);
    partial void DeleteGROUPSUBJECT(GROUPSUBJECT instance);
    partial void InsertSCORE(SCORE instance);
    partial void UpdateSCORE(SCORE instance);
    partial void DeleteSCORE(SCORE instance);
    partial void InsertSEMESTER(SEMESTER instance);
    partial void UpdateSEMESTER(SEMESTER instance);
    partial void DeleteSEMESTER(SEMESTER instance);
    partial void InsertSTUDENT(STUDENT instance);
    partial void UpdateSTUDENT(STUDENT instance);
    partial void DeleteSTUDENT(STUDENT instance);
    partial void InsertTEACHER(TEACHER instance);
    partial void UpdateTEACHER(TEACHER instance);
    partial void DeleteTEACHER(TEACHER instance);
    #endregion
		
		public MyLinQDataContext() : 
				base(global::WindowClassProject.Properties.Settings.Default.WINDOWCLASSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CLASS> CLASSes
		{
			get
			{
				return this.GetTable<CLASS>();
			}
		}
		
		public System.Data.Linq.Table<USERACCOUNT> USERACCOUNTs
		{
			get
			{
				return this.GetTable<USERACCOUNT>();
			}
		}
		
		public System.Data.Linq.Table<COURSE> COURSEs
		{
			get
			{
				return this.GetTable<COURSE>();
			}
		}
		
		public System.Data.Linq.Table<DEPARTMENT> DEPARTMENTs
		{
			get
			{
				return this.GetTable<DEPARTMENT>();
			}
		}
		
		public System.Data.Linq.Table<GROUPSUBJECT> GROUPSUBJECTs
		{
			get
			{
				return this.GetTable<GROUPSUBJECT>();
			}
		}
		
		public System.Data.Linq.Table<SCORE> SCOREs
		{
			get
			{
				return this.GetTable<SCORE>();
			}
		}
		
		public System.Data.Linq.Table<SEMESTER> SEMESTERs
		{
			get
			{
				return this.GetTable<SEMESTER>();
			}
		}
		
		public System.Data.Linq.Table<STUDENT> STUDENTs
		{
			get
			{
				return this.GetTable<STUDENT>();
			}
		}
		
		public System.Data.Linq.Table<TEACHER> TEACHERs
		{
			get
			{
				return this.GetTable<TEACHER>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CLASS")]
	public partial class CLASS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _classID;
		
		private string _teacherID;
		
		private System.Nullable<int> _schoolyear;
		
		private string _departmentID;
		
		private EntitySet<STUDENT> _STUDENTs;
		
		private EntityRef<DEPARTMENT> _DEPARTMENT;
		
		private EntityRef<TEACHER> _TEACHER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclassIDChanging(string value);
    partial void OnclassIDChanged();
    partial void OnteacherIDChanging(string value);
    partial void OnteacherIDChanged();
    partial void OnschoolyearChanging(System.Nullable<int> value);
    partial void OnschoolyearChanged();
    partial void OndepartmentIDChanging(string value);
    partial void OndepartmentIDChanged();
    #endregion
		
		public CLASS()
		{
			this._STUDENTs = new EntitySet<STUDENT>(new Action<STUDENT>(this.attach_STUDENTs), new Action<STUDENT>(this.detach_STUDENTs));
			this._DEPARTMENT = default(EntityRef<DEPARTMENT>);
			this._TEACHER = default(EntityRef<TEACHER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="NVarChar(256)")]
		public string teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					if (this._TEACHER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schoolyear", DbType="Int")]
		public System.Nullable<int> schoolyear
		{
			get
			{
				return this._schoolyear;
			}
			set
			{
				if ((this._schoolyear != value))
				{
					this.OnschoolyearChanging(value);
					this.SendPropertyChanging();
					this._schoolyear = value;
					this.SendPropertyChanged("schoolyear");
					this.OnschoolyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentID", DbType="NVarChar(30)")]
		public string departmentID
		{
			get
			{
				return this._departmentID;
			}
			set
			{
				if ((this._departmentID != value))
				{
					if (this._DEPARTMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._departmentID = value;
					this.SendPropertyChanged("departmentID");
					this.OndepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_STUDENT", Storage="_STUDENTs", ThisKey="classID", OtherKey="classID")]
		public EntitySet<STUDENT> STUDENTs
		{
			get
			{
				return this._STUDENTs;
			}
			set
			{
				this._STUDENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_CLASS", Storage="_DEPARTMENT", ThisKey="departmentID", OtherKey="departmentID", IsForeignKey=true)]
		public DEPARTMENT DEPARTMENT
		{
			get
			{
				return this._DEPARTMENT.Entity;
			}
			set
			{
				DEPARTMENT previousValue = this._DEPARTMENT.Entity;
				if (((previousValue != value) 
							|| (this._DEPARTMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEPARTMENT.Entity = null;
						previousValue.CLASSes.Remove(this);
					}
					this._DEPARTMENT.Entity = value;
					if ((value != null))
					{
						value.CLASSes.Add(this);
						this._departmentID = value.departmentID;
					}
					else
					{
						this._departmentID = default(string);
					}
					this.SendPropertyChanged("DEPARTMENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEACHER_CLASS", Storage="_TEACHER", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true, DeleteRule="SET NULL")]
		public TEACHER TEACHER
		{
			get
			{
				return this._TEACHER.Entity;
			}
			set
			{
				TEACHER previousValue = this._TEACHER.Entity;
				if (((previousValue != value) 
							|| (this._TEACHER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEACHER.Entity = null;
						previousValue.CLASSes.Remove(this);
					}
					this._TEACHER.Entity = value;
					if ((value != null))
					{
						value.CLASSes.Add(this);
						this._teacherID = value.teacherID;
					}
					else
					{
						this._teacherID = default(string);
					}
					this.SendPropertyChanged("TEACHER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = this;
		}
		
		private void detach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERACCOUNT")]
	public partial class USERACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userAccountID;
		
		private string _userAccount1;
		
		private string _password;
		
		private System.Nullable<int> _typeID;
		
		private EntitySet<STUDENT> _STUDENTs;
		
		private EntitySet<TEACHER> _TEACHERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserAccountIDChanging(int value);
    partial void OnuserAccountIDChanged();
    partial void OnuserAccount1Changing(string value);
    partial void OnuserAccount1Changed();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OntypeIDChanging(System.Nullable<int> value);
    partial void OntypeIDChanged();
    #endregion
		
		public USERACCOUNT()
		{
			this._STUDENTs = new EntitySet<STUDENT>(new Action<STUDENT>(this.attach_STUDENTs), new Action<STUDENT>(this.detach_STUDENTs));
			this._TEACHERs = new EntitySet<TEACHER>(new Action<TEACHER>(this.attach_TEACHERs), new Action<TEACHER>(this.detach_TEACHERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userAccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userAccountID
		{
			get
			{
				return this._userAccountID;
			}
			set
			{
				if ((this._userAccountID != value))
				{
					this.OnuserAccountIDChanging(value);
					this.SendPropertyChanging();
					this._userAccountID = value;
					this.SendPropertyChanged("userAccountID");
					this.OnuserAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="userAccount", Storage="_userAccount1", DbType="NVarChar(256)")]
		public string userAccount1
		{
			get
			{
				return this._userAccount1;
			}
			set
			{
				if ((this._userAccount1 != value))
				{
					this.OnuserAccount1Changing(value);
					this.SendPropertyChanging();
					this._userAccount1 = value;
					this.SendPropertyChanged("userAccount1");
					this.OnuserAccount1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(256)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int")]
		public System.Nullable<int> typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_STUDENT", Storage="_STUDENTs", ThisKey="userAccountID", OtherKey="userAccountID")]
		public EntitySet<STUDENT> STUDENTs
		{
			get
			{
				return this._STUDENTs;
			}
			set
			{
				this._STUDENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TEACHER", Storage="_TEACHERs", ThisKey="userAccountID", OtherKey="userAccountID")]
		public EntitySet<TEACHER> TEACHERs
		{
			get
			{
				return this._TEACHERs;
			}
			set
			{
				this._TEACHERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = this;
		}
		
		private void detach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = null;
		}
		
		private void attach_TEACHERs(TEACHER entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = this;
		}
		
		private void detach_TEACHERs(TEACHER entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COURSE")]
	public partial class COURSE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _courseID;
		
		private string _courseName;
		
		private string _departmentID;
		
		private System.Nullable<int> _credit;
		
		private string _descriptionCourse;
		
		private EntitySet<GROUPSUBJECT> _GROUPSUBJECTs;
		
		private EntityRef<DEPARTMENT> _DEPARTMENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncourseIDChanging(string value);
    partial void OncourseIDChanged();
    partial void OncourseNameChanging(string value);
    partial void OncourseNameChanged();
    partial void OndepartmentIDChanging(string value);
    partial void OndepartmentIDChanged();
    partial void OncreditChanging(System.Nullable<int> value);
    partial void OncreditChanged();
    partial void OndescriptionCourseChanging(string value);
    partial void OndescriptionCourseChanged();
    #endregion
		
		public COURSE()
		{
			this._GROUPSUBJECTs = new EntitySet<GROUPSUBJECT>(new Action<GROUPSUBJECT>(this.attach_GROUPSUBJECTs), new Action<GROUPSUBJECT>(this.detach_GROUPSUBJECTs));
			this._DEPARTMENT = default(EntityRef<DEPARTMENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseName", DbType="NVarChar(100)")]
		public string courseName
		{
			get
			{
				return this._courseName;
			}
			set
			{
				if ((this._courseName != value))
				{
					this.OncourseNameChanging(value);
					this.SendPropertyChanging();
					this._courseName = value;
					this.SendPropertyChanged("courseName");
					this.OncourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentID", DbType="NVarChar(30)")]
		public string departmentID
		{
			get
			{
				return this._departmentID;
			}
			set
			{
				if ((this._departmentID != value))
				{
					if (this._DEPARTMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._departmentID = value;
					this.SendPropertyChanged("departmentID");
					this.OndepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_credit", DbType="Int")]
		public System.Nullable<int> credit
		{
			get
			{
				return this._credit;
			}
			set
			{
				if ((this._credit != value))
				{
					this.OncreditChanging(value);
					this.SendPropertyChanging();
					this._credit = value;
					this.SendPropertyChanged("credit");
					this.OncreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descriptionCourse", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string descriptionCourse
		{
			get
			{
				return this._descriptionCourse;
			}
			set
			{
				if ((this._descriptionCourse != value))
				{
					this.OndescriptionCourseChanging(value);
					this.SendPropertyChanging();
					this._descriptionCourse = value;
					this.SendPropertyChanged("descriptionCourse");
					this.OndescriptionCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_GROUPSUBJECT", Storage="_GROUPSUBJECTs", ThisKey="courseID", OtherKey="courseID")]
		public EntitySet<GROUPSUBJECT> GROUPSUBJECTs
		{
			get
			{
				return this._GROUPSUBJECTs;
			}
			set
			{
				this._GROUPSUBJECTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_COURSE", Storage="_DEPARTMENT", ThisKey="departmentID", OtherKey="departmentID", IsForeignKey=true, DeleteRule="SET NULL")]
		public DEPARTMENT DEPARTMENT
		{
			get
			{
				return this._DEPARTMENT.Entity;
			}
			set
			{
				DEPARTMENT previousValue = this._DEPARTMENT.Entity;
				if (((previousValue != value) 
							|| (this._DEPARTMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEPARTMENT.Entity = null;
						previousValue.COURSEs.Remove(this);
					}
					this._DEPARTMENT.Entity = value;
					if ((value != null))
					{
						value.COURSEs.Add(this);
						this._departmentID = value.departmentID;
					}
					else
					{
						this._departmentID = default(string);
					}
					this.SendPropertyChanged("DEPARTMENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GROUPSUBJECTs(GROUPSUBJECT entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = this;
		}
		
		private void detach_GROUPSUBJECTs(GROUPSUBJECT entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPARTMENT")]
	public partial class DEPARTMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _departmentID;
		
		private string _departmentName;
		
		private string _teacherID;
		
		private EntitySet<CLASS> _CLASSes;
		
		private EntitySet<COURSE> _COURSEs;
		
		private EntityRef<TEACHER> _TEACHER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndepartmentIDChanging(string value);
    partial void OndepartmentIDChanged();
    partial void OndepartmentNameChanging(string value);
    partial void OndepartmentNameChanged();
    partial void OnteacherIDChanging(string value);
    partial void OnteacherIDChanged();
    #endregion
		
		public DEPARTMENT()
		{
			this._CLASSes = new EntitySet<CLASS>(new Action<CLASS>(this.attach_CLASSes), new Action<CLASS>(this.detach_CLASSes));
			this._COURSEs = new EntitySet<COURSE>(new Action<COURSE>(this.attach_COURSEs), new Action<COURSE>(this.detach_COURSEs));
			this._TEACHER = default(EntityRef<TEACHER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentID", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string departmentID
		{
			get
			{
				return this._departmentID;
			}
			set
			{
				if ((this._departmentID != value))
				{
					this.OndepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._departmentID = value;
					this.SendPropertyChanged("departmentID");
					this.OndepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentName", DbType="NVarChar(100)")]
		public string departmentName
		{
			get
			{
				return this._departmentName;
			}
			set
			{
				if ((this._departmentName != value))
				{
					this.OndepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._departmentName = value;
					this.SendPropertyChanged("departmentName");
					this.OndepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="NVarChar(256)")]
		public string teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					if (this._TEACHER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_CLASS", Storage="_CLASSes", ThisKey="departmentID", OtherKey="departmentID")]
		public EntitySet<CLASS> CLASSes
		{
			get
			{
				return this._CLASSes;
			}
			set
			{
				this._CLASSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_COURSE", Storage="_COURSEs", ThisKey="departmentID", OtherKey="departmentID")]
		public EntitySet<COURSE> COURSEs
		{
			get
			{
				return this._COURSEs;
			}
			set
			{
				this._COURSEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEACHER_DEPARTMENT", Storage="_TEACHER", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true, DeleteRule="SET NULL")]
		public TEACHER TEACHER
		{
			get
			{
				return this._TEACHER.Entity;
			}
			set
			{
				TEACHER previousValue = this._TEACHER.Entity;
				if (((previousValue != value) 
							|| (this._TEACHER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEACHER.Entity = null;
						previousValue.DEPARTMENTs.Remove(this);
					}
					this._TEACHER.Entity = value;
					if ((value != null))
					{
						value.DEPARTMENTs.Add(this);
						this._teacherID = value.teacherID;
					}
					else
					{
						this._teacherID = default(string);
					}
					this.SendPropertyChanged("TEACHER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CLASSes(CLASS entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = this;
		}
		
		private void detach_CLASSes(CLASS entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = null;
		}
		
		private void attach_COURSEs(COURSE entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = this;
		}
		
		private void detach_COURSEs(COURSE entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GROUPSUBJECT")]
	public partial class GROUPSUBJECT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _groupID;
		
		private string _groupName;
		
		private string _teacherID;
		
		private System.Nullable<int> _semesterID;
		
		private string _courseID;
		
		private EntityRef<COURSE> _COURSE;
		
		private EntityRef<SEMESTER> _SEMESTER;
		
		private EntityRef<TEACHER> _TEACHER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngroupIDChanging(string value);
    partial void OngroupIDChanged();
    partial void OngroupNameChanging(string value);
    partial void OngroupNameChanged();
    partial void OnteacherIDChanging(string value);
    partial void OnteacherIDChanged();
    partial void OnsemesterIDChanging(System.Nullable<int> value);
    partial void OnsemesterIDChanged();
    partial void OncourseIDChanging(string value);
    partial void OncourseIDChanged();
    #endregion
		
		public GROUPSUBJECT()
		{
			this._COURSE = default(EntityRef<COURSE>);
			this._SEMESTER = default(EntityRef<SEMESTER>);
			this._TEACHER = default(EntityRef<TEACHER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupName", DbType="NVarChar(256)")]
		public string groupName
		{
			get
			{
				return this._groupName;
			}
			set
			{
				if ((this._groupName != value))
				{
					this.OngroupNameChanging(value);
					this.SendPropertyChanging();
					this._groupName = value;
					this.SendPropertyChanged("groupName");
					this.OngroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="NVarChar(256)")]
		public string teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					if (this._TEACHER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterID", DbType="Int")]
		public System.Nullable<int> semesterID
		{
			get
			{
				return this._semesterID;
			}
			set
			{
				if ((this._semesterID != value))
				{
					if (this._SEMESTER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsemesterIDChanging(value);
					this.SendPropertyChanging();
					this._semesterID = value;
					this.SendPropertyChanged("semesterID");
					this.OnsemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="NVarChar(100)")]
		public string courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._COURSE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_GROUPSUBJECT", Storage="_COURSE", ThisKey="courseID", OtherKey="courseID", IsForeignKey=true)]
		public COURSE COURSE
		{
			get
			{
				return this._COURSE.Entity;
			}
			set
			{
				COURSE previousValue = this._COURSE.Entity;
				if (((previousValue != value) 
							|| (this._COURSE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COURSE.Entity = null;
						previousValue.GROUPSUBJECTs.Remove(this);
					}
					this._COURSE.Entity = value;
					if ((value != null))
					{
						value.GROUPSUBJECTs.Add(this);
						this._courseID = value.courseID;
					}
					else
					{
						this._courseID = default(string);
					}
					this.SendPropertyChanged("COURSE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SEMESTER_GROUPSUBJECT", Storage="_SEMESTER", ThisKey="semesterID", OtherKey="semesterID", IsForeignKey=true)]
		public SEMESTER SEMESTER
		{
			get
			{
				return this._SEMESTER.Entity;
			}
			set
			{
				SEMESTER previousValue = this._SEMESTER.Entity;
				if (((previousValue != value) 
							|| (this._SEMESTER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SEMESTER.Entity = null;
						previousValue.GROUPSUBJECTs.Remove(this);
					}
					this._SEMESTER.Entity = value;
					if ((value != null))
					{
						value.GROUPSUBJECTs.Add(this);
						this._semesterID = value.semesterID;
					}
					else
					{
						this._semesterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SEMESTER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEACHER_GROUPSUBJECT", Storage="_TEACHER", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true)]
		public TEACHER TEACHER
		{
			get
			{
				return this._TEACHER.Entity;
			}
			set
			{
				TEACHER previousValue = this._TEACHER.Entity;
				if (((previousValue != value) 
							|| (this._TEACHER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEACHER.Entity = null;
						previousValue.GROUPSUBJECTs.Remove(this);
					}
					this._TEACHER.Entity = value;
					if ((value != null))
					{
						value.GROUPSUBJECTs.Add(this);
						this._teacherID = value.teacherID;
					}
					else
					{
						this._teacherID = default(string);
					}
					this.SendPropertyChanged("TEACHER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SCORE")]
	public partial class SCORE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _studentID;
		
		private string _groupID;
		
		private System.Nullable<double> _score1;
		
		private string _evalute;
		
		private EntityRef<STUDENT> _STUDENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(string value);
    partial void OnstudentIDChanged();
    partial void OngroupIDChanging(string value);
    partial void OngroupIDChanged();
    partial void Onscore1Changing(System.Nullable<double> value);
    partial void Onscore1Changed();
    partial void OnevaluteChanging(string value);
    partial void OnevaluteChanged();
    #endregion
		
		public SCORE()
		{
			this._STUDENT = default(EntityRef<STUDENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					if (this._STUDENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="score", Storage="_score1", DbType="Float")]
		public System.Nullable<double> score1
		{
			get
			{
				return this._score1;
			}
			set
			{
				if ((this._score1 != value))
				{
					this.Onscore1Changing(value);
					this.SendPropertyChanging();
					this._score1 = value;
					this.SendPropertyChanged("score1");
					this.Onscore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evalute", DbType="NVarChar(256)")]
		public string evalute
		{
			get
			{
				return this._evalute;
			}
			set
			{
				if ((this._evalute != value))
				{
					this.OnevaluteChanging(value);
					this.SendPropertyChanging();
					this._evalute = value;
					this.SendPropertyChanged("evalute");
					this.OnevaluteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_SCORE", Storage="_STUDENT", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true)]
		public STUDENT STUDENT
		{
			get
			{
				return this._STUDENT.Entity;
			}
			set
			{
				STUDENT previousValue = this._STUDENT.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT.Entity = null;
						previousValue.SCOREs.Remove(this);
					}
					this._STUDENT.Entity = value;
					if ((value != null))
					{
						value.SCOREs.Add(this);
						this._studentID = value.studentID;
					}
					else
					{
						this._studentID = default(string);
					}
					this.SendPropertyChanged("STUDENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SEMESTER")]
	public partial class SEMESTER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _semesterID;
		
		private System.Nullable<int> _semesterYear;
		
		private EntitySet<GROUPSUBJECT> _GROUPSUBJECTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsemesterIDChanging(int value);
    partial void OnsemesterIDChanged();
    partial void OnsemesterYearChanging(System.Nullable<int> value);
    partial void OnsemesterYearChanged();
    #endregion
		
		public SEMESTER()
		{
			this._GROUPSUBJECTs = new EntitySet<GROUPSUBJECT>(new Action<GROUPSUBJECT>(this.attach_GROUPSUBJECTs), new Action<GROUPSUBJECT>(this.detach_GROUPSUBJECTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int semesterID
		{
			get
			{
				return this._semesterID;
			}
			set
			{
				if ((this._semesterID != value))
				{
					this.OnsemesterIDChanging(value);
					this.SendPropertyChanging();
					this._semesterID = value;
					this.SendPropertyChanged("semesterID");
					this.OnsemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semesterYear", DbType="Int")]
		public System.Nullable<int> semesterYear
		{
			get
			{
				return this._semesterYear;
			}
			set
			{
				if ((this._semesterYear != value))
				{
					this.OnsemesterYearChanging(value);
					this.SendPropertyChanging();
					this._semesterYear = value;
					this.SendPropertyChanged("semesterYear");
					this.OnsemesterYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SEMESTER_GROUPSUBJECT", Storage="_GROUPSUBJECTs", ThisKey="semesterID", OtherKey="semesterID")]
		public EntitySet<GROUPSUBJECT> GROUPSUBJECTs
		{
			get
			{
				return this._GROUPSUBJECTs;
			}
			set
			{
				this._GROUPSUBJECTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GROUPSUBJECTs(GROUPSUBJECT entity)
		{
			this.SendPropertyChanging();
			entity.SEMESTER = this;
		}
		
		private void detach_GROUPSUBJECTs(GROUPSUBJECT entity)
		{
			this.SendPropertyChanging();
			entity.SEMESTER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENT")]
	public partial class STUDENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _studentID;
		
		private string _studentFName;
		
		private string _studentLName;
		
		private System.Nullable<System.DateTime> _studentBDate;
		
		private string _studentAddress;
		
		private System.Nullable<bool> _studentGender;
		
		private string _studentPhone;
		
		private string _studentEmail;
		
		private string _studentCMND;
		
		private System.Data.Linq.Binary _picture;
		
		private string _classID;
		
		private System.Nullable<int> _userAccountID;
		
		private EntitySet<SCORE> _SCOREs;
		
		private EntityRef<CLASS> _CLASS;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(string value);
    partial void OnstudentIDChanged();
    partial void OnstudentFNameChanging(string value);
    partial void OnstudentFNameChanged();
    partial void OnstudentLNameChanging(string value);
    partial void OnstudentLNameChanged();
    partial void OnstudentBDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstudentBDateChanged();
    partial void OnstudentAddressChanging(string value);
    partial void OnstudentAddressChanged();
    partial void OnstudentGenderChanging(System.Nullable<bool> value);
    partial void OnstudentGenderChanged();
    partial void OnstudentPhoneChanging(string value);
    partial void OnstudentPhoneChanged();
    partial void OnstudentEmailChanging(string value);
    partial void OnstudentEmailChanged();
    partial void OnstudentCMNDChanging(string value);
    partial void OnstudentCMNDChanged();
    partial void OnpictureChanging(System.Data.Linq.Binary value);
    partial void OnpictureChanged();
    partial void OnclassIDChanging(string value);
    partial void OnclassIDChanged();
    partial void OnuserAccountIDChanging(System.Nullable<int> value);
    partial void OnuserAccountIDChanged();
    #endregion
		
		public STUDENT()
		{
			this._SCOREs = new EntitySet<SCORE>(new Action<SCORE>(this.attach_SCOREs), new Action<SCORE>(this.detach_SCOREs));
			this._CLASS = default(EntityRef<CLASS>);
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentFName", DbType="NVarChar(100)")]
		public string studentFName
		{
			get
			{
				return this._studentFName;
			}
			set
			{
				if ((this._studentFName != value))
				{
					this.OnstudentFNameChanging(value);
					this.SendPropertyChanging();
					this._studentFName = value;
					this.SendPropertyChanged("studentFName");
					this.OnstudentFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentLName", DbType="NVarChar(50)")]
		public string studentLName
		{
			get
			{
				return this._studentLName;
			}
			set
			{
				if ((this._studentLName != value))
				{
					this.OnstudentLNameChanging(value);
					this.SendPropertyChanging();
					this._studentLName = value;
					this.SendPropertyChanged("studentLName");
					this.OnstudentLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentBDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> studentBDate
		{
			get
			{
				return this._studentBDate;
			}
			set
			{
				if ((this._studentBDate != value))
				{
					this.OnstudentBDateChanging(value);
					this.SendPropertyChanging();
					this._studentBDate = value;
					this.SendPropertyChanged("studentBDate");
					this.OnstudentBDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentAddress", DbType="NVarChar(256)")]
		public string studentAddress
		{
			get
			{
				return this._studentAddress;
			}
			set
			{
				if ((this._studentAddress != value))
				{
					this.OnstudentAddressChanging(value);
					this.SendPropertyChanging();
					this._studentAddress = value;
					this.SendPropertyChanged("studentAddress");
					this.OnstudentAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentGender", DbType="Bit")]
		public System.Nullable<bool> studentGender
		{
			get
			{
				return this._studentGender;
			}
			set
			{
				if ((this._studentGender != value))
				{
					this.OnstudentGenderChanging(value);
					this.SendPropertyChanging();
					this._studentGender = value;
					this.SendPropertyChanged("studentGender");
					this.OnstudentGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentPhone", DbType="NVarChar(30)")]
		public string studentPhone
		{
			get
			{
				return this._studentPhone;
			}
			set
			{
				if ((this._studentPhone != value))
				{
					this.OnstudentPhoneChanging(value);
					this.SendPropertyChanging();
					this._studentPhone = value;
					this.SendPropertyChanged("studentPhone");
					this.OnstudentPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentEmail", DbType="NVarChar(40)")]
		public string studentEmail
		{
			get
			{
				return this._studentEmail;
			}
			set
			{
				if ((this._studentEmail != value))
				{
					this.OnstudentEmailChanging(value);
					this.SendPropertyChanging();
					this._studentEmail = value;
					this.SendPropertyChanged("studentEmail");
					this.OnstudentEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentCMND", DbType="NVarChar(20)")]
		public string studentCMND
		{
			get
			{
				return this._studentCMND;
			}
			set
			{
				if ((this._studentCMND != value))
				{
					this.OnstudentCMNDChanging(value);
					this.SendPropertyChanging();
					this._studentCMND = value;
					this.SendPropertyChanged("studentCMND");
					this.OnstudentCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary picture
		{
			get
			{
				return this._picture;
			}
			set
			{
				if ((this._picture != value))
				{
					this.OnpictureChanging(value);
					this.SendPropertyChanging();
					this._picture = value;
					this.SendPropertyChanged("picture");
					this.OnpictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", DbType="NVarChar(30)")]
		public string classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					if (this._CLASS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userAccountID", DbType="Int")]
		public System.Nullable<int> userAccountID
		{
			get
			{
				return this._userAccountID;
			}
			set
			{
				if ((this._userAccountID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserAccountIDChanging(value);
					this.SendPropertyChanging();
					this._userAccountID = value;
					this.SendPropertyChanged("userAccountID");
					this.OnuserAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_SCORE", Storage="_SCOREs", ThisKey="studentID", OtherKey="studentID")]
		public EntitySet<SCORE> SCOREs
		{
			get
			{
				return this._SCOREs;
			}
			set
			{
				this._SCOREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_STUDENT", Storage="_CLASS", ThisKey="classID", OtherKey="classID", IsForeignKey=true)]
		public CLASS CLASS
		{
			get
			{
				return this._CLASS.Entity;
			}
			set
			{
				CLASS previousValue = this._CLASS.Entity;
				if (((previousValue != value) 
							|| (this._CLASS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLASS.Entity = null;
						previousValue.STUDENTs.Remove(this);
					}
					this._CLASS.Entity = value;
					if ((value != null))
					{
						value.STUDENTs.Add(this);
						this._classID = value.classID;
					}
					else
					{
						this._classID = default(string);
					}
					this.SendPropertyChanged("CLASS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_STUDENT", Storage="_USERACCOUNT", ThisKey="userAccountID", OtherKey="userAccountID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.STUDENTs.Remove(this);
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.STUDENTs.Add(this);
						this._userAccountID = value.userAccountID;
					}
					else
					{
						this._userAccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SCOREs(SCORE entity)
		{
			this.SendPropertyChanging();
			entity.STUDENT = this;
		}
		
		private void detach_SCOREs(SCORE entity)
		{
			this.SendPropertyChanging();
			entity.STUDENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TEACHER")]
	public partial class TEACHER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _teacherID;
		
		private string _teacherFName;
		
		private string _teacherLName;
		
		private System.Nullable<System.DateTime> _teacherBDate;
		
		private System.Nullable<bool> _teacherGender;
		
		private string _teacherPhone;
		
		private string _teacherEmail;
		
		private string _teacherCMND;
		
		private System.Data.Linq.Binary _picture;
		
		private System.Nullable<int> _userAccountID;
		
		private EntitySet<CLASS> _CLASSes;
		
		private EntitySet<DEPARTMENT> _DEPARTMENTs;
		
		private EntitySet<GROUPSUBJECT> _GROUPSUBJECTs;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteacherIDChanging(string value);
    partial void OnteacherIDChanged();
    partial void OnteacherFNameChanging(string value);
    partial void OnteacherFNameChanged();
    partial void OnteacherLNameChanging(string value);
    partial void OnteacherLNameChanged();
    partial void OnteacherBDateChanging(System.Nullable<System.DateTime> value);
    partial void OnteacherBDateChanged();
    partial void OnteacherGenderChanging(System.Nullable<bool> value);
    partial void OnteacherGenderChanged();
    partial void OnteacherPhoneChanging(string value);
    partial void OnteacherPhoneChanged();
    partial void OnteacherEmailChanging(string value);
    partial void OnteacherEmailChanged();
    partial void OnteacherCMNDChanging(string value);
    partial void OnteacherCMNDChanged();
    partial void OnpictureChanging(System.Data.Linq.Binary value);
    partial void OnpictureChanged();
    partial void OnuserAccountIDChanging(System.Nullable<int> value);
    partial void OnuserAccountIDChanged();
    #endregion
		
		public TEACHER()
		{
			this._CLASSes = new EntitySet<CLASS>(new Action<CLASS>(this.attach_CLASSes), new Action<CLASS>(this.detach_CLASSes));
			this._DEPARTMENTs = new EntitySet<DEPARTMENT>(new Action<DEPARTMENT>(this.attach_DEPARTMENTs), new Action<DEPARTMENT>(this.detach_DEPARTMENTs));
			this._GROUPSUBJECTs = new EntitySet<GROUPSUBJECT>(new Action<GROUPSUBJECT>(this.attach_GROUPSUBJECTs), new Action<GROUPSUBJECT>(this.detach_GROUPSUBJECTs));
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherFName", DbType="NVarChar(100)")]
		public string teacherFName
		{
			get
			{
				return this._teacherFName;
			}
			set
			{
				if ((this._teacherFName != value))
				{
					this.OnteacherFNameChanging(value);
					this.SendPropertyChanging();
					this._teacherFName = value;
					this.SendPropertyChanged("teacherFName");
					this.OnteacherFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherLName", DbType="NVarChar(50)")]
		public string teacherLName
		{
			get
			{
				return this._teacherLName;
			}
			set
			{
				if ((this._teacherLName != value))
				{
					this.OnteacherLNameChanging(value);
					this.SendPropertyChanging();
					this._teacherLName = value;
					this.SendPropertyChanged("teacherLName");
					this.OnteacherLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherBDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> teacherBDate
		{
			get
			{
				return this._teacherBDate;
			}
			set
			{
				if ((this._teacherBDate != value))
				{
					this.OnteacherBDateChanging(value);
					this.SendPropertyChanging();
					this._teacherBDate = value;
					this.SendPropertyChanged("teacherBDate");
					this.OnteacherBDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherGender", DbType="Bit")]
		public System.Nullable<bool> teacherGender
		{
			get
			{
				return this._teacherGender;
			}
			set
			{
				if ((this._teacherGender != value))
				{
					this.OnteacherGenderChanging(value);
					this.SendPropertyChanging();
					this._teacherGender = value;
					this.SendPropertyChanged("teacherGender");
					this.OnteacherGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherPhone", DbType="NVarChar(30)")]
		public string teacherPhone
		{
			get
			{
				return this._teacherPhone;
			}
			set
			{
				if ((this._teacherPhone != value))
				{
					this.OnteacherPhoneChanging(value);
					this.SendPropertyChanging();
					this._teacherPhone = value;
					this.SendPropertyChanged("teacherPhone");
					this.OnteacherPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherEmail", DbType="NVarChar(40)")]
		public string teacherEmail
		{
			get
			{
				return this._teacherEmail;
			}
			set
			{
				if ((this._teacherEmail != value))
				{
					this.OnteacherEmailChanging(value);
					this.SendPropertyChanging();
					this._teacherEmail = value;
					this.SendPropertyChanged("teacherEmail");
					this.OnteacherEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherCMND", DbType="NVarChar(20)")]
		public string teacherCMND
		{
			get
			{
				return this._teacherCMND;
			}
			set
			{
				if ((this._teacherCMND != value))
				{
					this.OnteacherCMNDChanging(value);
					this.SendPropertyChanging();
					this._teacherCMND = value;
					this.SendPropertyChanged("teacherCMND");
					this.OnteacherCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary picture
		{
			get
			{
				return this._picture;
			}
			set
			{
				if ((this._picture != value))
				{
					this.OnpictureChanging(value);
					this.SendPropertyChanging();
					this._picture = value;
					this.SendPropertyChanged("picture");
					this.OnpictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userAccountID", DbType="Int")]
		public System.Nullable<int> userAccountID
		{
			get
			{
				return this._userAccountID;
			}
			set
			{
				if ((this._userAccountID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserAccountIDChanging(value);
					this.SendPropertyChanging();
					this._userAccountID = value;
					this.SendPropertyChanged("userAccountID");
					this.OnuserAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEACHER_CLASS", Storage="_CLASSes", ThisKey="teacherID", OtherKey="teacherID")]
		public EntitySet<CLASS> CLASSes
		{
			get
			{
				return this._CLASSes;
			}
			set
			{
				this._CLASSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEACHER_DEPARTMENT", Storage="_DEPARTMENTs", ThisKey="teacherID", OtherKey="teacherID")]
		public EntitySet<DEPARTMENT> DEPARTMENTs
		{
			get
			{
				return this._DEPARTMENTs;
			}
			set
			{
				this._DEPARTMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEACHER_GROUPSUBJECT", Storage="_GROUPSUBJECTs", ThisKey="teacherID", OtherKey="teacherID")]
		public EntitySet<GROUPSUBJECT> GROUPSUBJECTs
		{
			get
			{
				return this._GROUPSUBJECTs;
			}
			set
			{
				this._GROUPSUBJECTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TEACHER", Storage="_USERACCOUNT", ThisKey="userAccountID", OtherKey="userAccountID", IsForeignKey=true, DeleteRule="SET NULL")]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.TEACHERs.Remove(this);
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.TEACHERs.Add(this);
						this._userAccountID = value.userAccountID;
					}
					else
					{
						this._userAccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CLASSes(CLASS entity)
		{
			this.SendPropertyChanging();
			entity.TEACHER = this;
		}
		
		private void detach_CLASSes(CLASS entity)
		{
			this.SendPropertyChanging();
			entity.TEACHER = null;
		}
		
		private void attach_DEPARTMENTs(DEPARTMENT entity)
		{
			this.SendPropertyChanging();
			entity.TEACHER = this;
		}
		
		private void detach_DEPARTMENTs(DEPARTMENT entity)
		{
			this.SendPropertyChanging();
			entity.TEACHER = null;
		}
		
		private void attach_GROUPSUBJECTs(GROUPSUBJECT entity)
		{
			this.SendPropertyChanging();
			entity.TEACHER = this;
		}
		
		private void detach_GROUPSUBJECTs(GROUPSUBJECT entity)
		{
			this.SendPropertyChanging();
			entity.TEACHER = null;
		}
	}
}
#pragma warning restore 1591
